# Settins
int hearBeatWindow = 4;
int boxSize = 128;
int boxStrokeWidth = 8;
int distractorCount = 16;
int distractorSize = 64;
int distractorDistanceMax = 600; # Maximum distance each distractor is allowed to travel per turn
int distractorDistanceVariance = 200; # Random +- modifier to the max distance
double distractorAnimationDuration = 500.0; # How long does it take the distractor to travel?
int displayWidth = display_device.width();
int displayHeight = display_device.height();

# Utility function to draw the target box in the middle
sub
  addBox(
    picture& p,
    bool isFilled,
    bool isShowingCross,
    bool isShowingCheckmark
  )
begin

  # Internal Settings
  rgb_color colorForeground = colorText;
  rgb_color cBackground = colorBackground;

  # Draw box background (to avoid distractors behind the box)
  p.add_part(new box(boxSize, boxSize, cBackground), 0, 0);

  # Draw the box, filled or not filled
  if isFilled then
    # For a filled box, only one box is needed
    p.add_part(new box(boxSize, boxSize, colorForeground), 0, 0);
  else
    # Draw individual strokes: top, bottom, left, right
    p.add_part(new box(boxStrokeWidth, boxSize, colorForeground), 0, boxSize * 0.5 - boxStrokeWidth * 0.5); # Top line
    p.add_part(new box(boxStrokeWidth, boxSize, colorForeground), 0, boxSize * (-0.5) + boxStrokeWidth * 0.5); # Bottom line
    p.add_part(new box(boxSize, boxStrokeWidth, colorForeground), boxSize * (-0.5) + boxStrokeWidth * 0.5, 0); # Left Line
    p.add_part(new box(boxSize, boxStrokeWidth, colorForeground), boxSize * 0.5 - boxStrokeWidth * 0.5, 0); # Right Line
  end;

  if isShowingCross || isShowingCheckmark then

    # Set up line graphic
    line_graphic lg = new line_graphic();
    lg.set_line_width(boxStrokeWidth);
    lg.set_join_type(join_point);

    # Pick line color based on filled/unfilled box background
    if isFilled then
      lg.set_line_color(cBackground);
    else
      lg.set_line_color(colorForeground);
    end;

    # Set Scaling
    double scalingFactor = boxSize / 128.0;

    # Define points to be drawn either for a cross or checkmark
    if isShowingCross then
      array<double> points[][] = {{40.0,40.0}, {64.0, 64.0}, {88.0, 40.0}, {64.0, 64.0}, {88.0, 88.0}, {64.0, 64.0}, {40.0, 88.0}};
      drawPolyLineScaled(lg, points, scalingFactor, false);
    else
      array<double> points[][] = {{40.0, 64.0}, {56.0, 80.0}, {88.0, 40.0}};
      drawPolyLineScaled(lg, points, scalingFactor, false);
    end;

    # Draw
    lg.redraw();
    p.add_part(lg, -64 * scalingFactor, 64 * scalingFactor);

  end;

end;


# Utility function to draw the distractors
sub
  addDistractors(
    picture& p,
    array<double,1>& xO,
    array<double,1>& yO,
    array<double,1>& xT,
    array<double,1>& yT,
    double progress
  )
begin

  # Internal Settings
  rgb_color colorForeground = colorText;
  rgb_color cBackground = colorBackground;

  loop
    int i = 1;
  until i > distractorCount begin
    ellipse_graphic e = new ellipse_graphic();
    e.set_dimensions(double(distractorSize), double(distractorSize));
    e.set_color(colorForeground);
    e.redraw();
    p.add_part(
      e,
      lerp(xO[i], xT[i], progress),
      lerp(yO[i], yT[i], progress)
    );
    i = i + 1;
  end;

end;


# Creates new target coordinates for distractors
sub
  newCoordinates(
    array<double,1>& x,
    array<double,1>& y,
    bool limitMovement
  )
begin

  int maxDistance = random(
    distractorDistanceMax - distractorDistanceVariance,
    distractorDistanceMax + distractorDistanceVariance
  );

  loop
    int i = 1;
  until i > distractorCount begin

    # Calculate new target position
    double xOld = x[i];
    double yOld = y[i];
    double xNew = displayWidth * (-0.5) + double(random(distractorSize * (-2), displayWidth + distractorSize * 2));
    double yNew = displayHeight * (-0.5) + double(random(distractorSize * (-2), displayHeight + distractorSize * 2));

    # Limit new coordinates to max distance (when required)
    if limitMovement then
      double distance = dist(xOld, yOld, xNew, yNew);
      double ratio = distance / maxDistance;
      if ratio > 1 then
        xNew = xOld + (xNew - xOld) * (maxDistance/distance);
        yNew = yOld + (yNew - yOld) * (maxDistance/distance);
      end;
    end;

    x.fill(i, i, xNew, 0.0);
    y.fill(i, i, yNew, 0.0);
    i = i + 1;

  end;
end;


# Makes a trial of a given duration with a fixation cross and sends a trigger
sub
  string showDistractorTrial(
    bool isGoTrial,
    bool isTWaveTrial,
    int tWaveDelay,
    int judgementResponseWindow
  )
begin

  # Internal
  array<double> xOrigin[distractorCount];
  array<double> yOrigin[distractorCount];
  array<double> xTarget[distractorCount];
  array<double> yTarget[distractorCount];

  # Set up initial coordinates
  newCoordinates(xTarget, yTarget, false);
  xOrigin = xTarget;
  yOrigin = yTarget;
  newCoordinates(xTarget, yTarget, true);

  # Set up timing
  int movementDelay = 0;
  if isTWaveTrial then
    movementDelay = tWaveDelay;
  end;

  # Set up judgment randomness
  int judgementHeartBeat = random(hearBeatWindow-1, hearBeatWindow+1);
  int judgementDelay = random(0, 600);

  # Set up trial names
  string triggerNamePrefix;
  if isGoTrial then triggerNamePrefix = "go_"; else triggerNamePrefix = "no_go_"; end;
  string triggerNameSuffix;
  if isTWaveTrial then triggerNameSuffix = "_t_wave"; else triggerNameSuffix = "_r_wave"; end;

  # Set up trial
  trial t = new trial;
  t.set_type(fixed);
  t.set_duration(17); # Try for 60FPS

  # Check if input port was set up
	bool has_ports = input_port_manager.port_count() > 0;
	if !has_ports then exit("No input port for heart rate triggers defined"); end;
	input_port port = input_port_manager.get_port(1);
	port.clear();

  # Set up output variable
  string output = "";

  # Set up success/failure variables
  bool hasFailed = false;
  bool hasSucceeded = false;

  loop
    int pulseCount = 1;
    bool canBeJudged = false;
    bool hasResponded = false;
    int responseCountStart = response_manager.total_response_count();
    int judgementStart = 0;
    int timeStart = clock.time();
    int timePulseDeduplicationLimit = timeStart;
    array<int> pulseTimes[0];
  until pulseCount > (hearBeatWindow + 2) begin

    # Remove last frame
    if t.stimulus_event_count() > 0 then
      t.remove_stimulus_event(1);
    end;

    # Calculate movement progress
    int timeNow = clock.time();
    double progress;
    if pulseCount <= 1 then
      # Wait one heartbeat to ensure there is a small interval between the trial starting and the first movement
      progress = 0.0;
    else
      progress = easeOutQuad(clamp(0.0, 1.0, ((timeNow - timeStart) / distractorAnimationDuration)));
    end;

    # Determine how soon the user can make a judgement
    if !canBeJudged && pulseCount == judgementHeartBeat && (timeNow - timeStart) >= judgementDelay then

      if isGoTrial then
        sendTrigger("go_response");
      end;

      canBeJudged = true;
      judgementStart = timeNow;

    end;

    # Response handling
    int responseCountNow = response_manager.total_response_count();
    if !hasFailed && !hasSucceeded && responseCountNow > responseCountStart then
			int button_code = response_manager.last_response();

      # Success + Failure Logic
      if isGoTrial && button_code == 2 && canBeJudged && (timeNow - judgementStart <= judgementResponseWindow) then
        sendTriggerCustom(triggerNamePrefix + "hit" + triggerNameSuffix, " " + string(judgementResponseWindow));
        hasSucceeded = true;
        output = "go_hit";
      else
        hasFailed = true;
        if isGoTrial && timeNow - judgementStart > judgementResponseWindow then
          sendTriggerCustom(triggerNamePrefix + "miss" + triggerNameSuffix, " " + string(judgementResponseWindow));
          output = "go_miss";
        else
          sendTrigger(triggerNamePrefix + "commission" + triggerNameSuffix);
        end;
      end;

      term.print_line(timeNow - judgementStart);

      responseCountStart = responseCountNow;
		end;

    # Timeout (fail for go)
    if !hasFailed && canBeJudged && timeNow - judgementStart > judgementResponseWindow then
      if isGoTrial && !hasSucceeded && canBeJudged then
        hasFailed = true;
        sendTriggerCustom(triggerNamePrefix + "miss" + triggerNameSuffix, " " + string(judgementResponseWindow));
        output = "go_miss";
      end;
    end;

    # Create new frame
    picture p = new picture();
    addDistractors(p, xOrigin, yOrigin, xTarget, yTarget, progress);
    addBox(p, isGoTrial && canBeJudged, hasFailed, hasSucceeded);
    t.add_stimulus_event(p);

    # Go through new port codes for heart beat detection
    if timePulseDeduplicationLimit <= timeNow then
      loop int i = 1; until i > port.total_count()
  		begin
        if port.codes(i) == 255 then
          timePulseDeduplicationLimit = timeNow + 400; # Ignore additional pulses for the next 400ms
          pulseTimes.add(timeNow + movementDelay); # Queue next pulse (with our without delay)
          break;
  		  end;
  			i = i + 1;
  		end;
    end;

    # Set up next pulse when there are more pulses in the cue than have been counted and the last unregistered pulse is in the past
    if pulseTimes.count() > (pulseCount - 1) then

      if pulseTimes[pulseCount] <= timeNow then

        pulseCount = pulseCount + 1;

        # Make new coordinates (not for last interval)
        if pulseCount <= (hearBeatWindow + 1) then

          timeStart = clock.time();
          sendTrigger(triggerNamePrefix + "movement" + triggerNameSuffix);

          # Kick off next movement
          if pulseCount > 2 then
            xOrigin = xTarget;
            yOrigin = yTarget;
            newCoordinates(xTarget, yTarget, true);
          end;

        end;

      end;

    end;

    port.clear();
    t.present();

  end;

  if !isGoTrial && !hasFailed then
    sendTrigger(triggerNamePrefix + "hit" + triggerNameSuffix);
    #hasSucceeded = true;
  end;

  return output;

end;

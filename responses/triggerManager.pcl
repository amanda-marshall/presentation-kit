# Internal variables for global scope
array<string> triggerNames[0];
array<int> triggerCodes[0];

# Take triggers object and sepearate it into trigger names and trigger codes for later consumtion by sendTrigger and setTrigger
sub initTriggers(array<string,1>& arr)
begin
	int length = arr.count();
	loop
		int i = 1;
	until
		i > length
	begin
		# Add trigger names to name array
		triggerNames.add(arr[i]);
		# Convert trigger code from string to int and add to code array
		triggerCodes.add(int(arr[i+1]));
		# Increment (by 2!)
		i = i + 2;
	end;
end;


# Implementing custom IndexOf function, becaue PCL is DUMB AS FUCK
sub
	int IndexOf(array<string,1>& arr, string target)
begin
	int length = arr.count();
	loop
		int i = 1;
	until
		i > length
	begin
		string val = arr[i];
		if val == target then
			return i;
		end;
		i = i + 1;
	end;
	return -1;
end;


# Utility function to manually record an event code to the log and send a port code
sub
	sendTriggerCustom(string triggerName, string suffix)
begin

	# Find index of specified triggerName amongst all trigger names
	int index = IndexOf(triggerNames, triggerName);

	# No trigger found
	if index == -1 then
		term.print_line("WARNING: " + triggerName + " could not be found, no trigger sent.");
		return;
	end;

	# Trigger found
	string tName = triggerNames[index] + suffix;
	int tCode = triggerCodes[index];

	# Add triggerName to logfile
	logfile.add_event_entry(tName);

	# Check if ports are specified
	bool hasPorts = output_port_manager.port_count() > 0;

	# Send trigger code
	if hasPorts then
		output_port port = output_port_manager.get_port(1);
		port.send_code(tCode);

	# No port found
	else
		term.print_line("WARNING: Trigger code could not be sent, as there is no output port defined.");
	end;

end;

sub
	sendTrigger(string triggerName)
begin
	sendTriggerCustom(triggerName, "");
end;



# Utilitiy function to set event code and port code on a stimulus event at the same time
sub
	setTrigger(stimulus_event event, string triggerName)
begin

	# Find index of specified triggerName amongst all trigger names
	int index = IndexOf(triggerNames, triggerName);

	# No trigger found
	if index == -1 then
		term.print_line("WARNING: " + triggerName + " could not be found, no trigger sent.");
		return;
	end;

	# Trigger found
	string tName = triggerNames[index];
	int tCode = triggerCodes[index];

	event.set_event_code(tName);
	event.set_port_code(tCode);

end;

# Initialisation
initTriggers(triggers);
